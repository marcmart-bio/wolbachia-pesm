install.packages("tidyverse")
install.packages("tidyverse")
install.packages("BiocManager")
library(BiocManager)
BiocManager::install(sangerseqR)
BiocManager::install(Biostrings)
BiocManager::install(Biostrings)
### Call dependencies
library("BiocManager")
BiocManager::install(sangerseqR)
BiocManager::install(Biostrings)
BiocManager::install(ggtree)
BiocManager::install(msa)
BiocManager::install(seqinr)
library(sangerseqR)
BiocManager::install("sangerseqR")
library(sangerseqR)
#install.packages("BiocManager")
BiocManager::install("Biostrings")
#install.packages("BiocManager")
BiocManager::install("Biostrings")
library(Biostrings)
BiocManager::install("sangerseqR")
BiocManager::install("ggtree")
BiocManager::install("msa")
BiocManager::install("seqinr")
library(sangerseqR)
library(sangerseqR)
library(Biostrings)
library(ggtree)
library(msa)
library(seqinr)
library(IRanges)
ir1 <- IRanges(start = c(1,3,5), end = c(3,5,7))
ir1
ir2 <- IRanges(start = c(1,3,5), width = 3
ir2 <- IRanges(start = c(1,3,5), width = 3)
ir2 <- IRanges(start = c(1,3,5), width = 3)
ir2
width(ir2) <- 1
ir2
names(ir1) <- paste("A", 1:3, sep = "") # name IRanges object
ir1
names(ir1) <- paste("A", 1:3, sep = "") # name IRanges object
ir1
ir1 <- IRanges(start = c(1,3,5), end = c(3,5,7))
ir1
names(ir1) <- paste("A", 1:3, sep = "") # name IRanges object
ir1
c(ir1, ir2) #concatenate objects
resize(ir1, width = 1, fix = "center")
ir1 <- IRanges(start = c(1,3,5), width = 1)
ir2 <- IRanges(start = c(4,5,6), width = 1)
ir2
ir1
union(ir1, ir2)
c(ir1,ir2)
reduce(c(ir1,ir2))
intersec(ir1, ir2)
intersect(ir1, ir2)
###
ir1 <- IRanges(start = c(1,4,8), end = c(3,7,10))
ir2 <- IRanges(start = c(3,4), width = 3)
ir1
ir2
ov <- findOverlaps(ir1, ir2)
ov
ir1[2]
ir2[2]
queryHits(ov)
subjectHits(ov)
unique(queryHits(ov)) #exact elements of the query that overlaps subject
args(findOverlaps)
countOverlaps(ir1, ir2) # simple count the number of overlaps of each element of the query
nearest(ir1, ir2)
library(GenomicRanges)
library(GRanges)
BiocManager::install("GenomicRanges")
#BiocManager::install("GenomicRanges")
library(GenomicRanges)
gr <- GRanges(seqnames = c("chr1"), strand = c("+", "-", "+"), ranges = IRanges(start = c(1,3,5, width = 3)))
gr
gr <- GRanges(seqnames = c("chr1"), strand = c("+", "-", "+"), ranges = IRanges(start = c(1,3,5), width = 3))
gr
flank(gr)
flank(gr, 5)
promoters(gr)
seqinfo(gr)
seqlength(gr)
seqlengths(gr)
seqlengths(gr) <- c("chr1" <- 10)
seqinfo(gr)
seqlevels(gr)
gaps(gr)
seqnames(gr) <- c("chr1", "chr2")
seqlevels <- c("chr1", "chr2")
gr
seqlevels(gr) <- c("chr1", "chr2")
gr
seqlevels(gr) <- c("chr1", "chr2")
seqlevels(gr)
seqlevels(gr) <- c("chr1", "chr2", "chr1")
seqnames(gr) <- c("chr1", "chr2")
seqlevels(gr) <- c("chr1", "chr2", "chr1")
seqlevels(gr) <- c("chr1", "chr2")
seqnames(gr) <- c("chr1", "chr2")
seqnames(gr) <- c("chr1", "chr2", "chr1")
gr
seqlevels(gr) <- c("chr1", "chr2")
seqlevels(gr) <- c("chr2", "chr1")
gr
sort(gr)
genome(gr) <- "hg19"
gr
seqinfo(gr)
gr2 <- gr
genome(gr2) <- "hg18"
findOverlaps(gr, gr2)
###
ir = IRanges(start = 1:3, width = 2)
ir
df = DataFrame(ir - ir, score = rnorm(3)) # DataFrame() is an special data frame object in GRanges
df = DataFrame(ir = ir, score = rnorm(3)) # DataFrame() is an special data frame object in GRanges
df
df[1,1]
df$ir
df[1,2]
df[1,3]
df[1,1]
df[1,2]
gr <- GRanges(seqnames = c("chr1"), strand = c("+", "-", "+"), ranges = IRanges(start = c(1,3,5), width = 3))
gr
values(gr)
values(gr) <- DataFrame(score = rnorm(3)) #including metadata with DataFrame in GRanges object
gr
gr2 <- GRanges(seqnames = c("chr1"), strand = "*", ranges = IRanges(start = c(1,3,5), width = 3))
gr2
gr
findOverlap(gr,gr2)
findOverlaps(gr,gr2)
findOverlaps(gr, gr2, ignore.strand = TRUE)
findOverlaps(gr, gr2)
findOverlaps(gr, gr2, ignore.strand = TRUE)
subsetByOverlaps(gr, gr2)
findOverlaps(gr2, gr1)
findOverlaps(gr2, gr)
subsetByOverlaps(gr2, gr)
gr <- GRanges(seqnames = c("chr1", "chr2", "chr1"), strand = c("+", "-", "+"), ranges = IRanges(start = c(1,3,5), width = 3))
gr
findOverlaps(gr, gr2)
findOverlaps(gr, gr2, ignore.strand = TRUE)
subsetByOverlaps(gr, gr2)
findOverlaps(gr2, gr)
subsetByOverlaps(gr2, gr)
subsetByOverlaps(gr, gr2)
###
df = data.frame(chr = "chr1", start = 1:3, end = 4:6, score = rnorm(3))
df
makeGRangesFromDataFrame(df)
makeGRangesFromDataFrame(df, keep.extra.columns = TRUE)
gr2 <- GRanges(seqnames = c("chr1", "chr2"), ranges = IRanges(start = 1:2, end = 4:5))
gr <- GRanges(seqnames = c("chr1", "chr2"), ranges = IRanges(start = 1:2, end = 4:5))
gr
seqlevels(gr, force = TRUE) = "chr1"
seqlevels(gr, force = TRUE) <- "chr1"
seqlevels(gr, force = TRUE, value = "chr1")
gr
seqlevels(gr, force = TRUE) <- "chr1"
seqlevels(gr)
seqlevels(gr) <- "chr1"
seqlevels(gr, force = TRUE) <- "chr1"
#alternativaly
dropSeqlevels(gr, "chr2")
keepSeqlevels(gr, "chr1")
gr <- GRanges(seqnames = c("chr1", "chr2"), ranges = IRanges(start = 1:2, end = 4:5))
gr
#alternativaly
dropSeqlevels(gr, "chr2")
keepSeqlevels(gr, "chr1")
gr
newStyle = mapSeqlevels(seqlevels(gr), "NCBI")
gr <- GRanges(seqnames = c("chr1", "chr2"), ranges = IRanges(start = 1:2, end = 4:5))
newStyle = mapSeqlevels(seqlevels(gr), "NCBI")
newStyle
gr = renameSeqlevels(gr, newStyle)
gr
library(AnnotationHub)
### AnnotationHub ###
BiocManager::install("AnnotationHub")
library(AnnotationHub)
ah <- AnnotationHub()
ah
ah[1]
ah[[1]] #retrieve the sequence online
BiocManager::install(“rtracklayer”)
BiocManager::install("rtracklayer")
unique(ah$provider)
ah[1] #look for snapshot
unique(ah$dataprovider)
unique(ah$species)
unique(ah$species == "Drosophila")
unique(ah$species == "Drosophila melanogaster")
unique(ah[ah$species == "Drosophila melanogaster"])
ah[ah$species == "Drosophila melanogaster"]
ah[ah$species == "Drosophila melanogaster"]$species
ah[ah$species == "Drosophila willistoni"]$species
ah[ah$species == "Drosophila willistoni"]
ah[ah$species == "Drosophila fumipennis"]
ah[ah$species == "Drosophila sturtevanti"]
ah[ah$species == "Drosophila stutervanti"]
ah[ah$species == "Drosophila willistoni"]
ah[ah$species == "Drosophila saltans"]
ah[ah$species == "Drosophila prosaltans"]
ah[ah$species == "Drosophila willistoni"]
ah[[ah$species == "Drosophila willistoni"]] #retrieve
ah[ah$species == "Drosophila willistoni"]
ah[["AH10489"]] #retrieve
ah[[" AH108769"]] #retrieve
ah[["AH108769"]] #retrieve
wil <- ah[["AH108769"]] #retrieve
wil
ah = subset(ah, species = "Homo sapiens")
ah = subset(ah, species == "Homo sapiens")
ah
query(ah, "H3K4me3")
query(ah, c("H3K4me3", "Gm12878"))
ah2 <- display(ah)
ah2
ah <- AnnotationHub()
dros <- query(ah, c("Drosophila"))
dros
dros_ci <- query(dros, c("Drosophila", "cifa"))
dros_ci
dros_ci <- query(dros, c("Drosophila", "cifA"))
dros_ci
dros
wil <- display(dros)
wil
wil
wilgr <- wil[["AH108769"]]
wilgr
help('select')
select(wilgr, "REFSEQ")
select(wilgr, columns = "Drosophila willistoni")
wilgr$packageName
wilgr$import
wilgr$conn
wilgr$copy
wilgr$getRefClass
getRefClass(wilgr)
wilgr
dros
wil
library(sangerseqR)
library(Biostrings)
library(seqinr)
### Set current file directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(sangeranalysesR)
BiocManager::install("sangeranalysesR")
library(sangeranalysesR)
### Call dependencies
BiocManager::install("sangeranalyseR")
library(sangeranalyseR)
BiocManager::install("reshape2")
BiocManager::install("stringr")
BiocManager::install("sangeranalyseR", force = TRUE)
library(sangeranalyseR)
library(sangerseqR)
e
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
# The following initializes usage of Bioc devel
BiocManager::install(version='3.16')
BiocManager::install("sangeranalyseR")
BiocManager::install("sangeranalyseR")
install.packages("devtools")
# Download it from the master branch
install_github("roblanf/sangeranalyseR", ref = "master")
